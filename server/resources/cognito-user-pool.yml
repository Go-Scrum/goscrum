Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      # Generate a name based on the stage
      UserPoolName: ${self:custom.stage}-goscrum-user-pool
      # Set email and username as an alias
      AliasAttributes:
        - email
        - preferred_username

      # Custom Message lambda for Cognito user creation/updation
      #      LambdaConfig:
      #        VerifyAuthChallengeResponse:
      #          Fn::Join:
      #          - ""
      #          -
      #            - "arn:aws:lambda:"
      #            - { "Ref": "AWS::Region" }
      #            - ":"
      #            - { "Ref": "AWS::AccountId" }
      #            - ":function:goscrum-"
      #            - ${self:custom.stage}
      #            - "-cognito-pre-signup"

      # User required fields
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # Generate an app client name based on the stage
      ClientName: ${self:custom.stage}-goscrum-user-pool-client
      SupportedIdentityProviders:
        - Google
      CallbackURLs:
        - http://localhost:3000
        - http://localhost:3001
      LogoutURLs:
        - http://localhost:3000
        - http://localhost:3001
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - aws.cognito.signin.user.admin
        - email
        - openid
      UserPoolId:
        Ref: CognitoUserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: false

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: ${self:custom.stage}-goscrum
      UserPoolId:
        Ref: CognitoUserPool

  CognitoUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId:
        Ref: CognitoUserPool
      ProviderName: "Google"
      ProviderDetails:
        client_id: "467444174003-dpc7fdaqus0h0p1qncq737ttcetjqg75.apps.googleusercontent.com"
        client_secret: "1s1r6yYkLXEmQtF4H4QQAAIK"
        authorize_scopes: "profile email openid"
      ProviderType: "Google"
      AttributeMapping:
        email: "email"
        given_name: "given_name"
        family_name: "family_name"

  ApiGatewayAuthorizer:
    DependsOn:
      - ApiGatewayRestApi
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name:  ${self:custom.stage}-goscrum-user-pool-authorizer
      IdentitySource: method.request.header.Authorization
      RestApiId:
        Ref: ApiGatewayRestApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - Fn::GetAtt: [CognitoUserPool, Arn]
  # Assigning Cognito permission to invoke lambda function upon changes in user pool
#  OnCognitoSignupPermission:
#    Type: 'AWS::Lambda::Permission'
#    Properties:
#      Action: "lambda:InvokeFunction"
#      FunctionName:
#        Fn::Join:
#        - ""
#        - - "arn:aws:lambda:"
#          - { "Ref": "AWS::Region" }
#          - ":"
#          - { "Ref": "AWS::AccountId" }
#          - ":function:goscrum-loan-server-"
#          - ${self:custom.stage}
#          - "-cognito-invite-message"
#      Principal: "cognito-idp.amazonaws.com"
#      SourceArn:
#        Fn::GetAtt: [ "CognitoUserPool", "Arn" ]

# Print out the Id of the User Pool that is created
Outputs:
  UserPoolId:
    Value:
      Ref: CognitoUserPool

  UserPoolArn:
    Value:
      Fn::GetAtt: [ "CognitoUserPool", "Arn" ]

  UserPoolClientId:
    Value:
      Ref: CognitoUserPoolClient
