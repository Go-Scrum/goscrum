service: goscrum-server

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-offline
  - serverless-dotenv-plugin

package:
  exclude:
    - ./**
  include:
    - ./bin/**
    - ./templates/**

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Domain name for email format
  domainName: ${env:DOMAIN_NAME, "http://localhost:3001"}
  debug: ${env:DEBUG, "1"}

provider:
  name: aws
  runtime: go1.x
  profile: goscrum # TODO need to add ccs profile when credentials are ready
  stage: dev
  region: 'us-west-2'
  memorySize: 128 # optional, in MB, default is 1024
  timeout: 30 # optional, in seconds, default is 6

  environment:
    USER_POOL_ID:
      Ref: CognitoUserPool
    DEBUG: ${self:custom.debug}
    DOMAIN_URL: ${self:custom.domainName}
    DATABASE_NAME: ${env:DATABASE_NAME}
    DATABASE_HOSTNAME: ${env:DATABASE_HOSTNAME}
    DATABASE_USERNAME: ${env:DATABASE_USERNAME}
    DATABASE_PASSWORD: ${env:DATABASE_PASSWORD}
    DATABASE_PORT: ${env:DATABASE_PORT}

  stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)
    - Effect: Allow
      Principal: "*"
      Action: "Update:*"
      Resource: "*"
    - Effect: Deny
      Principal: "*"
      Resource: "*"
      Action:
        - Update:Replace
        - Update:Delete
      Condition:
        StringEquals:
          ResourceType:
            - AWS::Cognito::UserPool
            - AWS::Cognito::UserPoolClient

  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:*
        - ses:SendEmail
        - ses:SendRawEmail
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
        - sns:Publish
        - s3:*  # TODO -- need to check again
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - "Fn::GetAtt": [ CognitoUserPool, Arn ]
        - arn:aws:ses:*
#  httpApi:
#    authorizers:
#      ccsAuthorizer:
#        identitySource: $request.header.Authorization
#        issuerUrl: https://cognito-idp.${region}.amazonaws.com/${cognitoPoolId}

# Create our resources with separate CloudFormation templates
resources:
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}

functions:
  graphql:
    handler: bin/graphql
    events:
      # For API Gateway - REST API
      - http:
          method: GET
          path: '/health'
          cors: true
      - http:
          method: POST
          path: '/graphql'
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
      - http:
          method: GET
          path: '/'
          cors: true

      # For API Gateway - HTTP API TODO- if HTTP API release in us-west-2 then release it to production
  #      - httpAPI: 'GET /health'
  #      - httpAPI: 'POST /graphql'
  #      - httpAPI: 'GET /'
  migrate:
    handler: bin/migrate

  cognito-pre-signup:
    handler: bin/pre-signup
    events:
      - cognitoUserPool:
          pool: ${self:custom.stage}-goscrum-user-pool
          trigger: PreSignUp
          existing: true


